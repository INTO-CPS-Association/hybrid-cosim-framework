semantic adaptation reactive moore SensorPlantMultiRate
at "./SensorMultiRate.fmu"

	for inner fmu Sensor sensor
		at "./LoadNSensor_FixedEuler_1Em6.fmu"
		with input ports Real f "F_INPUT@expseu_"
		with output ports Real x_aft "X_AFTER_LOAD@expseu_", Real v "V_OUTPUT@expseu_", Real x "X_OUTPUT@expseu_"

	for inner fmu Plant plant
		at "./EMAPlantNoLoad_FixedEuler_1Em6.fmu"
		with input ports
			Real torque "torque_input@expseu_",
			Real psu "psu_vol_input_v@expseu_",
			Real v "V_IN@expseu_",
			Real x "X_IN@expseu_"
		with output ports
			Real w "ang_vel_out_rpm@expseu_",
			Real f "F_OUT@expseu_"

	coupled as
		plant.f -> sensor.f,
		sensor.x -> plant.x,
		sensor.v -> plant.v
input ports Real torque , Real psu
output ports Real x_aft , Real w

param Real RATE := 10.0 , Real INIT_TORQUE := 0.0 , Real INIT_PSU := 0.0 , Real INIT_X_AFT := 0.0 , Real INIT_V := 0.0 , Real INIT_X := 0.0 , Real INIT_W := 0.0 , Real INIT_F := 0.0 ;

control rules {
	var Real micro_step := 0.0;
	var Real inner_time := 0.0;

	inner_time := t;

	micro_step := H/RATE;

	for (var iter in 0 .. RATE) { plant . x := stored__x ; plant . v := stored__v ;
		do_step(plant, inner_time, micro_step); sensor . f := stored__f ;
		do_step(sensor, inner_time, micro_step);
		inner_time := inner_time + micro_step;
	}

	return H;
}
in var Real stored__psu := INIT_PSU , Real stored__torque := INIT_TORQUE ; in rules {
true -> {
stored__torque := SensorPlantMultiRate . torque ;
stored__psu := SensorPlantMultiRate . psu ; } --> {
plant . psu := stored__psu ;
plant . torque := stored__torque ; } ; }
out var Real stored__f := INIT_F , Real stored__v := INIT_V , Real stored__x := INIT_X , Real stored__w := INIT_W , Real stored__x_aft := INIT_X_AFT ; out rules {
true -> {
stored__x_aft := sensor . x_aft ;
stored__w := plant . w ;
stored__x := sensor . x ;
stored__v := sensor . v ;
stored__f := plant . f ; } --> {
SensorPlantMultiRate . x_aft := stored__x_aft ;
SensorPlantMultiRate . w := stored__w ; } ; }