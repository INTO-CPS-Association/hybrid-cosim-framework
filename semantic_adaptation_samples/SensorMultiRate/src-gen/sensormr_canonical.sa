semantic adaptation reactive moore SensorMultiRate
at "./SensorMultiRate.fmu"

	for inner fmu Sensor sensor
		at "./LoadNSensor_FixedEuler_1Em6.fmu"
		with input ports Real f "F_INPUT@expseu_"
		with output ports Real x_aft "X_AFTER_LOAD@expseu_", Real v "V_OUTPUT@expseu_", Real x "X_OUTPUT@expseu_"

input ports Real f output ports Real x_aft , Real v , Real x

param Integer RATE:=0 , Real INIT_F := 0.0 , Real INIT_X_AFT := 0.0 , Real INIT_V := 0.0 , Real INIT_X := 0.0 ; 

control var Integer previous_f := 0;

control rules {
	var Real micro_step := 0.0;
	var Real inner_time := 0.0;
	
	inner_time := t;
	
	micro_step := H/RATE;
	
	for (var iter in 0 .. RATE) {
		do_step(sensor,inner_time,micro_step);
		inner_time := inner_time + micro_step;	
	}
	
	previous_f := current_f;
	
	return H;
}

in var Integer current_f := 0 , Real stored__f := INIT_F ;
in rules {
	true -> {
stored__f := SensorMultiRate . f ;
		current_f := f;
	} --> {
sensor . f := stored__f ;
		//sensor.f := previous_f + (current_f - previous_f)*(dt + h) ;
		sensor.f := current_f;
	};
}
out var Real stored__v := INIT_V , Real stored__x_aft := INIT_X_AFT , Real stored__x := INIT_X ; out rules {
true -> {
stored__x := sensor . x ;
stored__x_aft := sensor . x_aft ;
stored__v := sensor . v ; } --> {
SensorMultiRate . x := stored__x ;
SensorMultiRate . x_aft := stored__x_aft ;
SensorMultiRate . v := stored__v ; } ; }