semantic adaptation reactive moore SensorMultiRate
at "./SensorMultiRate.fmu"

	for inner fmu Sensor sensor
		at "./LoadNSensor_FixedEuler_1Em6.fmu"
		with input ports Real f "F_INPUT@expseu_"
		with output ports Real x_aft "X_AFTER_LOAD@expseu_", Real v "V_OUTPUT@expseu_", Real x "X_OUTPUT@expseu_"
input ports Real f
output ports Real x_aft , Real v , Real x

//input ports Real f -> sensor.f

param Real RATE := 1.0 , Real INIT_F := 0.0 , Real INIT_X_AFT := 0.0 , Real INIT_V := 0.0 , Real INIT_X := 0.0 ; 

//control var previous_f := 0.0;

control rules {
	var Real micro_step := 0.0;
	var Real inner_time := 0.0;
	
	inner_time := t;
	
	micro_step := H/RATE;
	
	for (var iter in 0 .. RATE) {
		do_step(sensor,inner_time,micro_step);
		inner_time := inner_time + micro_step;	
	}
	
//	previous_f := current_f;
	
	return H;
}

//in var current_f := 0.0;
//in rules {
//	true -> {
//		current_f := f;
//	} --> {
//		sensor.f := previous_f + ((current_f - previous_f)/H)*dt ;
//	};
//} in var Real stored__f := INIT_F ; in rules {
true -> {
stored__f := SensorMultiRate . f ; } --> {
sensor . f := stored__f ; } ; }
out var Real stored__x_aft := INIT_X_AFT , Real stored__v := INIT_V , Real stored__x := INIT_X ; out rules {
true -> {
stored__v := sensor . v ;
stored__x_aft := sensor . x_aft ;
stored__x := sensor . x ; } --> {
SensorMultiRate . v := stored__v ;
SensorMultiRate . x_aft := stored__x_aft ;
SensorMultiRate . x := stored__x ; } ; }